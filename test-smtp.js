const nodemailer = require('nodemailer');
const net = require('net');

// C·∫•u h√¨nh VPS c·ªßa b·∫°n
const VPS_IP = 'YOUR_VPS_IP';  // Thay b·∫±ng IP VPS th·ª±c t·∫ø
const SMTP_PORT = 2525;

console.log('üß™ Test k·∫øt n·ªëi SMTP server tr√™n VPS...\n');

// Test 1: Ki·ªÉm tra port c√≥ m·ªü kh√¥ng
async function testPortConnection() {
    console.log('1Ô∏è‚É£ Ki·ªÉm tra k·∫øt n·ªëi port...');
    
    return new Promise((resolve) => {
        const client = new net.Socket();
        const timeout = setTimeout(() => {
            client.destroy();
            console.log('‚ùå Timeout - Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn VPS');
            console.log('   C√≥ th·ªÉ port 2525 b·ªã block ho·∫∑c firewall ch·∫∑n');
            resolve(false);
        }, 5000);

        client.connect(SMTP_PORT, VPS_IP, () => {
            clearTimeout(timeout);
            console.log('‚úÖ Port 2525 ƒë√£ m·ªü v√† c√≥ th·ªÉ k·∫øt n·ªëi');
            client.destroy();
            resolve(true);
        });

        client.on('error', (err) => {
            clearTimeout(timeout);
            console.log('‚ùå L·ªói k·∫øt n·ªëi:', err.message);
            console.log('   Ki·ªÉm tra: firewall, port forwarding, server ƒëang ch·∫°y');
            resolve(false);
        });
    });
}

// Test 2: G·ª≠i email test
async function testSendEmail() {
    console.log('\n2Ô∏è‚É£ Test g·ª≠i email...');
    
    try {
        const transporter = nodemailer.createTransporter({
            host: VPS_IP,
            port: SMTP_PORT,
            secure: false,
            auth: false,
            connectionTimeout: 10000,
            greetingTimeout: 10000,
            socketTimeout: 10000
        });

        const testEmail = {
            from: 'test@example.com',
            to: 'temp123@tempmail.com', // Thay b·∫±ng email ·∫£o th·ª±c t·∫ø
            subject: 'Test Email t·ª´ Script',
            text: 'ƒê√¢y l√† email test t·ª´ script Node.js',
            html: '<h1>Test Email</h1><p>ƒê√¢y l√† email test t·ª´ script Node.js</p>'
        };

        const result = await transporter.sendMail(testEmail);
        console.log('‚úÖ Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!');
        console.log('üìß Message ID:', result.messageId);
        console.log('üì® Response:', result.response);

    } catch (error) {
        console.log('‚ùå L·ªói g·ª≠i email:', error.message);
        
        if (error.code === 'ECONNREFUSED') {
            console.log('   SMTP server t·ª´ ch·ªëi k·∫øt n·ªëi');
        } else if (error.code === 'ENOTFOUND') {
            console.log('   Kh√¥ng t√¨m th·∫•y server (ki·ªÉm tra IP)');
        } else if (error.code === 'ETIMEDOUT') {
            console.log('   Timeout - c√≥ th·ªÉ firewall block');
        }
    }
}

// Test 3: Debug commands cho VPS
function showDebugCommands() {
    console.log('\nüîß COMMANDS DEBUG CHO VPS:');
    console.log('=====================================');
    console.log('# Ki·ªÉm tra process ƒëang ch·∫°y:');
    console.log('ps aux | grep node');
    console.log('');
    console.log('# Ki·ªÉm tra port ƒëang listen:');
    console.log('netstat -tlnp | grep 2525');
    console.log('ss -tlnp | grep 2525');
    console.log('');
    console.log('# Ki·ªÉm tra firewall:');
    console.log('sudo ufw status');
    console.log('sudo iptables -L');
    console.log('');
    console.log('# M·ªü port trong firewall:');
    console.log('sudo ufw allow 2525');
    console.log('sudo iptables -A INPUT -p tcp --dport 2525 -j ACCEPT');
    console.log('');
    console.log('# Test t·ª´ VPS local:');
    console.log('telnet localhost 2525');
    console.log('nc -zv localhost 2525');
    console.log('');
    console.log('# Test logs server:');
    console.log('tail -f /var/log/syslog | grep node');
    console.log('journalctl -u your-service-name -f');
    console.log('');
    console.log('# Restart server:');
    console.log('pm2 restart all');
    console.log('systemctl restart your-service');
}

// Ch·∫°y tests
async function runTests() {
    if (VPS_IP === 'YOUR_VPS_IP') {
        console.log('‚ö†Ô∏è  C·∫ßn thay VPS_IP b·∫±ng IP th·ª±c t·∫ø c·ªßa VPS!');
        console.log('   S·ª≠a d√≤ng: const VPS_IP = "YOUR_VPS_IP";');
        showDebugCommands();
        return;
    }

    console.log(`üéØ Testing VPS: ${VPS_IP}:${SMTP_PORT}\n`);

    const portOpen = await testPortConnection();
    
    if (portOpen) {
        await testSendEmail();
    }

    showDebugCommands();
    
    console.log('\nüìù CHECKLIST TROUBLESHOOTING:');
    console.log('=====================================');
    console.log('‚ñ° VPS server ƒëang ch·∫°y');
    console.log('‚ñ° Port 2525 ƒë√£ m·ªü trong firewall');
    console.log('‚ñ° SMTP server bind to 0.0.0.0 (kh√¥ng ph·∫£i 127.0.0.1)');
    console.log('‚ñ° Provider VPS kh√¥ng block port 2525');
    console.log('‚ñ° DNS/IP ch√≠nh x√°c');
    console.log('‚ñ° Kh√¥ng c√≥ reverse proxy/load balancer ch·∫∑n');
}

// Ch·∫°y script
runTests().catch(console.error);
